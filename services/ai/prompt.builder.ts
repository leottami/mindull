/**
 * Prompt-Builder f√ºr AI-Summaries
 * Erstellt kompakte, achtsame Prompts f√ºr Evening/Morning AI-Verarbeitung
 */

import { EveningAggregation, MorningAggregation } from './aggregate';

/**
 * Prompt-Typen
 */
export type PromptType = 'evening' | 'morning';
export type Language = 'de' | 'en';

/**
 * Prompt-Konfiguration
 */
export interface PromptConfig {
  language: Language;
  maxTokens?: number;
  tone?: 'mindful' | 'positive' | 'neutral';
}

/**
 * Erstellte Prompts
 */
export interface BuiltPrompt {
  systemPrompt: string;
  userPrompt: string;
  estimatedTokens: number;
  language: Language;
}

/**
 * Atem-Empfehlungen f√ºr Evening
 */
const BREATHING_RECOMMENDATIONS = {
  de: [
    'Box Breathing (4-4-4-4) f√ºr Entspannung',
    '4-7-8 Atmung f√ºr besseren Schlaf',
    'Coherent Breathing (5-5) f√ºr Balance',
    'Triangle Breathing f√ºr Fokus',
    'Tiefe Bauchatmung f√ºr Stressabbau'
  ],
  en: [
    'Box Breathing (4-4-4-4) for relaxation',
    '4-7-8 breathing for better sleep',
    'Coherent breathing (5-5) for balance',
    'Triangle breathing for focus',
    'Deep belly breathing for stress relief'
  ]
};

/**
 * Generische Impulse f√ºr Morning
 */
const MORNING_IMPULSES = {
  de: [
    'Nimm dir Zeit f√ºr eine bewusste Atem√ºbung',
    'Schreibe drei Dinge auf, f√ºr die du dankbar bist',
    'Reflektiere √ºber deine Ziele f√ºr diese Woche',
    'Mache einen kurzen Spaziergang in der Natur',
    'Praktiziere Achtsamkeit bei deiner ersten Mahlzeit',
    'Setze eine positive Intention f√ºr den Tag',
    'Kontaktiere einen lieben Menschen'
  ],
  en: [
    'Take time for a mindful breathing exercise',
    'Write down three things you are grateful for',
    'Reflect on your goals for this week',
    'Take a short walk in nature',
    'Practice mindfulness during your first meal',
    'Set a positive intention for the day',
    'Reach out to a loved one'
  ]
};

/**
 * Prompt-Builder Klasse
 */
export class PromptBuilder {
  private static readonly MAX_TOKENS = 2000;
  private static readonly TARGET_TOKENS = 1500;
  private static readonly SYSTEM_PROMPT_TOKENS = 300;

  /**
   * Erstellt Evening Summary Prompt
   */
  static buildEveningPrompt(
    aggregation: EveningAggregation,
    config: PromptConfig = { language: 'de' }
  ): BuiltPrompt {
    const { language } = config;
    
    const systemPrompt = this.buildEveningSystemPrompt(language);
    const userPrompt = this.buildEveningUserPrompt(aggregation, language);
    
    const estimatedTokens = this.estimateTokens(systemPrompt + userPrompt);
    
    return {
      systemPrompt,
      userPrompt,
      estimatedTokens,
      language
    };
  }

  /**
   * Erstellt Morning Focus Prompt
   */
  static buildMorningPrompt(
    aggregation: MorningAggregation,
    config: PromptConfig = { language: 'de' }
  ): BuiltPrompt {
    const { language } = config;
    
    const systemPrompt = this.buildMorningSystemPrompt(language);
    const userPrompt = this.buildMorningUserPrompt(aggregation, language);
    
    const estimatedTokens = this.estimateTokens(systemPrompt + userPrompt);
    
    return {
      systemPrompt,
      userPrompt,
      estimatedTokens,
      language
    };
  }

  /**
   * Evening System Prompt
   */
  private static buildEveningSystemPrompt(language: Language): string {
    if (language === 'de') {
      return `Du bist ein achtsamer Begleiter f√ºr die Abend-Reflexion. 

Erstelle eine 3-5 Punkte Zusammenfassung der letzten 24 Stunden basierend auf:
- Journal-Eintr√§gen
- Dankbarkeits-Notizen  
- Atem√ºbungen

Ton: Positiv, unterst√ºtzend, ohne Diagnosen. Fokus auf Wachstum und Bewusstsein.

F√ºge eine passende Atem-Empfehlung f√ºr den Abend hinzu.

Format:
‚Ä¢ Punkt 1
‚Ä¢ Punkt 2  
‚Ä¢ Punkt 3
‚Ä¢ Punkt 4 (optional)
‚Ä¢ Punkt 5 (optional)

üí® Atem-Empfehlung: [Empfehlung]`;
    } else {
      return `You are a mindful companion for evening reflection.

Create a 3-5 point summary of the last 24 hours based on:
- Journal entries
- Gratitude notes
- Breathing exercises

Tone: Positive, supportive, no diagnoses. Focus on growth and awareness.

Add a suitable breathing recommendation for the evening.

Format:
‚Ä¢ Point 1
‚Ä¢ Point 2
‚Ä¢ Point 3
‚Ä¢ Point 4 (optional)
‚Ä¢ Point 5 (optional)

üí® Breathing recommendation: [recommendation]`;
    }
  }

  /**
   * Morning System Prompt
   */
  private static buildMorningSystemPrompt(language: Language): string {
    if (language === 'de') {
      return `Du bist ein achtsamer Begleiter f√ºr den Tagesstart.

Erstelle 2-3 inspirierende Impulse f√ºr den Tag basierend auf:
- Gestern Abend (falls verf√ºgbar)
- Generischen Achtsamkeits-Praktiken

Ton: Ermutigend, positiv, ohne Druck. Fokus auf kleine, machbare Schritte.

Format:
üåÖ Tagesfokus:
‚Ä¢ Impuls 1
‚Ä¢ Impuls 2
‚Ä¢ Impuls 3 (optional)

üíù Dankbarkeits-Erinnerung: [kurze Erinnerung]`;
    } else {
      return `You are a mindful companion for morning focus.

Create 2-3 inspiring impulses for the day based on:
- Yesterday evening (if available)
- General mindfulness practices

Tone: Encouraging, positive, no pressure. Focus on small, achievable steps.

Format:
üåÖ Daily focus:
‚Ä¢ Impulse 1
‚Ä¢ Impulse 2
‚Ä¢ Impulse 3 (optional)

üíù Gratitude reminder: [short reminder]`;
    }
  }

  /**
   * Evening User Prompt
   */
  private static buildEveningUserPrompt(aggregation: EveningAggregation, language: Language): string {
    const dataText = this.formatAggregationForPrompt(aggregation, language);
    
    if (language === 'de') {
      return `Hier sind deine Aktivit√§ten der letzten 24 Stunden:

${dataText}

Erstelle eine achtsame Abend-Zusammenfassung mit 3-5 Punkten und einer passenden Atem-Empfehlung.`;
    } else {
      return `Here are your activities from the last 24 hours:

${dataText}

Create a mindful evening summary with 3-5 points and a suitable breathing recommendation.`;
    }
  }

  /**
   * Morning User Prompt
   */
  private static buildMorningUserPrompt(aggregation: MorningAggregation, language: Language): string {
    const dataText = this.formatMorningDataForPrompt(aggregation, language);
    
    if (language === 'de') {
      return `Hier sind deine Daten f√ºr den Tagesstart:

${dataText}

Erstelle 2-3 inspirierende Impulse f√ºr heute und eine Dankbarkeits-Erinnerung.`;
    } else {
      return `Here is your data for the day start:

${dataText}

Create 2-3 inspiring impulses for today and a gratitude reminder.`;
    }
  }

  /**
   * Formatiert Evening-Aggregation f√ºr Prompt
   */
  private static formatAggregationForPrompt(aggregation: EveningAggregation, language: Language): string {
    const parts: string[] = [];

    if (aggregation.diaryEntries.length > 0) {
      const diaryText = aggregation.diaryEntries
        .map(entry => `${entry.date}: ${entry.text}`)
        .join('\n');
      parts.push(language === 'de' ? `JOURNAL:\n${diaryText}` : `JOURNAL:\n${diaryText}`);
    }

    if (aggregation.gratitudeEntries.length > 0) {
      const gratitudeText = aggregation.gratitudeEntries
        .map(entry => `${entry.date} ${entry.morning ? '(morgens)' : '(abends)'}: ${entry.text}`)
        .join('\n');
      parts.push(language === 'de' ? `DANKBARKEIT:\n${gratitudeText}` : `GRATITUDE:\n${gratitudeText}`);
    }

    if (aggregation.breathingSessions.length > 0) {
      const breathingText = aggregation.breathingSessions
        .map(session => `${session.method} - ${Math.round(session.durationSec / 60)} Min`)
        .join('\n');
      parts.push(language === 'de' ? `ATEM√úBUNGEN:\n${breathingText}` : `BREATHING:\n${breathingText}`);
    }

    if (parts.length === 0) {
      return language === 'de' 
        ? 'Keine Aktivit√§ten in den letzten 24 Stunden.'
        : 'No activities in the last 24 hours.';
    }

    return parts.join('\n\n');
  }

  /**
   * Formatiert Morning-Aggregation f√ºr Prompt
   */
  private static formatMorningDataForPrompt(aggregation: MorningAggregation, language: Language): string {
    const parts: string[] = [];

    if (aggregation.lastEveningSummary) {
      parts.push(language === 'de' 
        ? `GESTERN ABEND:\n${aggregation.lastEveningSummary}`
        : `YESTERDAY EVENING:\n${aggregation.lastEveningSummary}`
      );
    }

    if (aggregation.todayGoals && aggregation.todayGoals.length > 0) {
      const goalsText = aggregation.todayGoals
        .map((goal, index) => `${index + 1}. ${goal}`)
        .join('\n');
      parts.push(language === 'de' 
        ? `HEUTIGE IMPULSE:\n${goalsText}`
        : `TODAY'S IMPULSES:\n${goalsText}`
      );
    }

    if (parts.length === 0) {
      return language === 'de'
        ? 'Keine spezifischen Daten verf√ºgbar.'
        : 'No specific data available.';
    }

    return parts.join('\n\n');
  }

  /**
   * Sch√§tzt Token-Anzahl (grobe Sch√§tzung: 1 Token ‚âà 4 Zeichen)
   */
  private static estimateTokens(text: string): number {
    return Math.ceil(text.length / 4);
  }

  /**
   * Validiert Prompt-Gr√∂√üe
   */
  static validatePromptSize(prompt: BuiltPrompt): boolean {
    return prompt.estimatedTokens <= this.MAX_TOKENS;
  }

  /**
   * Optimiert Prompt f√ºr Token-Budget
   */
  static optimizeForTokenBudget(prompt: BuiltPrompt): BuiltPrompt {
    if (prompt.estimatedTokens <= this.TARGET_TOKENS) {
      return prompt;
    }

    // K√ºrze User-Prompt wenn n√∂tig
    const maxUserTokens = this.TARGET_TOKENS - this.SYSTEM_PROMPT_TOKENS;
    const currentUserTokens = this.estimateTokens(prompt.userPrompt);
    
    if (currentUserTokens > maxUserTokens) {
      const maxUserChars = maxUserTokens * 4;
      const shortenedUserPrompt = prompt.userPrompt.substring(0, maxUserChars) + '...';
      
      return {
        ...prompt,
        userPrompt: shortenedUserPrompt,
        estimatedTokens: this.estimateTokens(prompt.systemPrompt + shortenedUserPrompt)
      };
    }

    return prompt;
  }

  /**
   * Holt zuf√§llige Atem-Empfehlung
   */
  static getRandomBreathingRecommendation(language: Language): string {
    const recommendations = BREATHING_RECOMMENDATIONS[language];
    const randomIndex = Math.floor(Math.random() * recommendations.length);
    return recommendations[randomIndex];
  }

  /**
   * Holt zuf√§llige Morning-Impulse
   */
  static getRandomMorningImpulses(language: Language, count: number = 3): string[] {
    const impulses = MORNING_IMPULSES[language];
    const shuffled = [...impulses].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
  }

  /**
   * Erstellt kompakten Fallback-Prompt
   */
  static buildFallbackPrompt(type: PromptType, language: Language): BuiltPrompt {
    if (type === 'evening') {
      const systemPrompt = this.buildEveningSystemPrompt(language);
      const userPrompt = language === 'de' 
        ? 'Keine spezifischen Daten verf√ºgbar. Erstelle eine allgemeine Abend-Reflexion mit 3-5 Punkten und einer Atem-Empfehlung.'
        : 'No specific data available. Create a general evening reflection with 3-5 points and a breathing recommendation.';
      
      return {
        systemPrompt,
        userPrompt,
        estimatedTokens: this.estimateTokens(systemPrompt + userPrompt),
        language
      };
    } else {
      const systemPrompt = this.buildMorningSystemPrompt(language);
      const userPrompt = language === 'de'
        ? 'Keine spezifischen Daten verf√ºgbar. Erstelle 2-3 allgemeine, inspirierende Impulse f√ºr den Tag.'
        : 'No specific data available. Create 2-3 general, inspiring impulses for the day.';
      
      return {
        systemPrompt,
        userPrompt,
        estimatedTokens: this.estimateTokens(systemPrompt + userPrompt),
        language
      };
    }
  }
}
